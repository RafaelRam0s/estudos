
Para programar em php no html;
    <?php
        // Código php
    ?>



Para printar uma mensagem na tela:
    echo '<p>Olá Mundo!</p>';
    echo "<p>Olá Mundo!!</p>";
    echo('<p>Olá Mundo!!!</p>');

    print('<p>Olá Mundo!!!!</p>');



Comentários:
    // Comentário em linha
    
    # Comentário em linha
    
    /*
        Comentário
        em bloco
    */



Variáveis:  
    $nome_da_variavel = 'Olá Mundo';
    
    echo('<p>$nome_da_variavel</p>');
    print('<p>$nome_da_variavel</p>');

    echo("<p>$nome_da_variavel</p>");
    print("<p>$nome_da_variavel</p>");

    echo('<p>' . $nome_da_variavel . '</p>');
    print('<p>' . $nome_da_variavel . '</p>');
    
    class Objeto {};

    $inteiro = 100;
    $float = 12.3;
    $bool = true;
    $string = 'Texto';
    $array = [1, 2, 3];
    $objeto = new Objeto();
    $nulo = null



Operadores Matemáticos:
    $x = 5 + 3 // Adição = 8
    $x = 5 - 3 // Subtração = 2
    $x = 5 * 3 // Multiplicação = 15
    $x = 5 / 3 // Divisão = 1.6666666666667
    $x = 5 % 3 // Resto = 2
    $x = 5 ** 3 // Expoente = 125
    
    $x += 3 // $x = $x + 3
    $x -= 3 // $x = $x - 3
    $x *= 3 // $x = $x * 3
    $x /= 3 // $x = $x / 3

    $x++ // $x = $x + 1
    ++$x // ($x = 1 + $x)



Operadores de Comparação:
    Igual: 0 == '0' // true
    Diferente: 0 != '0' // false
    Totalmente Igual: 0 === '0' // false
    Totalmente Diferente: 0 !== '0' // true
    
    Menor: 5 < 3 // false
    Maior: 5 > 3 // true
    Menor Igual5 <= 3 // false
    Maior Igual5 >= 3 // true
    
    1 <=> 1 // 0 (1 == 1)
    3 <=> 2 // 1 (3 > 2)
    2 <=> 3 // -1 (2 < 3)

    AND: true && true // true
    OR: false || false // false

    NOT: !true // false



Comando para encerrar a leitura do php:
    die();



Concatenação de strings:
    $teste = 'Hello' . ' ' . 'World';



Textos grandes:
    $texto = <<<'LABEL'
        Escrevendo um monte de palavras 
        De forma parecida com um grande conjunto de parágrafos
    LABEL;




Quebra de linha:
    Para que uma representação de quebra de linha ocorra na página web, insira a tagname <br> dentro da string, visto que o html interpreta o texto do echo e do print como texto para html

    Agora para servidor é necessário que a string esteja com aspas duplas e então utilize o \n

    echo('Exemplo na web de quebra de linha.<br />Viu? ');
    echo("Exemplo no servidor de quebra de linha.\nViu? ");



Pegar um caracter de uma string:
    $texto = 'Olá Mundo';
    echo($texto[0]);
    echo($texto[1]);



Ver o número de caracteres de uma string:
    $texto = 'Esta frase tem 28 caracteres';
    $numero_de_caracteres = strlen($texto); // Retorna o valor numérico: 28

Pegar caracteres dentro de um intervalo:
    $texto = 'Esta frase tem 28 caracteres';
    $corte_na_string = substr($texto, 11, 3); // Retorna a string: tem

Converter todos os caracteres em maiúsculas:
    $texto = 'Esta frase tem 28 caracteres';
    $string_maiuscula = strtoupper($texto); // Retorna a string: ESTA FRASE TEM 28 CARACTERES

Converter todos os caracteres em minúsculas:
    $texto = 'Esta frase tem 28 caracteres';
    $string_minuscula = strtolower($texto); // Retorna a string: esta frase tem 28 caracteres

Procurar um caracter na string:
    $texto = 'Esta frase tem 28 caracteres';
    $posicao_da_string = strpos($texto, 'a '); // Retorna o valor numérico: 3

Substituir uma palavra por outra:
    $texto = 'Esta frase tem 28 caracteres';
    $string_texto_alterado = str_replace('a', 'x', $texto); // Retorna a string: Estx frxse tem 28 cxrxcteres

Procurar uma string dentro de uma string:
    $nome = 'Rafael Ramos da Silva';
    $x = str_contains($nome, 'Pinheiro');

Verificar se uma string tem um inicio com outra string:
    $nome = 'Rafael Ramos da Silva';
    $x = str_starts_with($nome, 'rafael'); // false
    $y = str_starts_with($nome, 'Rafael'); // true

Verificar se uma string tem um final com outra string:
    $nome = 'Rafael Ramos da Silva';
    $x = str_ends_with($nome, 'silva'); // false
    $y = str_ends_with($nome, 'Silva'); // true



Criptografar uma string em base64:
    $texto = 'Esta frase tem 28 caracteres';
    echo('Teste: ' . (base64_encode($texto)));

Descriptografar uma string em base64:
    $texto = 'Esta frase tem 28 caracteres';
    echo('Teste: ' . base64_decode((base64_encode($texto))));

Criptografar uma string em uuencode:
    $texto = 'Esta frase tem 28 caracteres';
    echo('Teste: ' . (convert_uuencode($texto)));

Descriptografar uma string em uuencode:
    $texto = 'Esta frase tem 28 caracteres';
    echo('Teste: ' . convert_uudecode(convert_uuencode($texto)));




Converter um número decimal em caracter com base na tabela ascii:
        $numero = 65; // um número qualquer entre 0 e 255
        $texto = chr($numero);
        echo('Teste: ' . $texto);

Converter um caracter em número decimal com base na tabela ascii:
        $caracter = 'A';
        $texto = ord($caracter);
        echo('Teste: ' . $texto);

Tabelar a quantidade de vezes que cada caracter de uma string se repetiu:
    $texto = 'Esta frase tem 28 caracteres';
    foreach ( count_chars($texto, 1) as $caracter => $quantidade_repetida )
    {
        echo('O caracter "' . chr($caracter) . '" se repetiu ' . $quantidade_repetida . ' vezes.' . "\n");
    }

    Observação:
        Dependendo do segundo parâmetro de count_chars() pode retornar o seguinte:

        0 - Um array com um byte-value como chave e a frequência de cada byte como valor.
        1 - mesmo que o 0 mas apenas byte-values com frequência maior do que 0 são listadas.
        2 - mesmo que 0 mas apenas byte-values com frequência igual a 0 são listadas.
        3 - uma string contendo todos caracteres únicos é retornada.
        4 - uma string contendo todos caracteres não usados é retornada.



Criar um array:
    $array_1 = array(10, 20, 30);
    $array_2 = [10, 20, 30];

    $array_3 = 
    [
        10 => 123,
        20 => 456,
        30 => 789
    ]; // Aqui foi definido a chave e qual o valor respectivo que ela deve obter
    
    $array_4 = [
        'A' => 1,
        'B' => 2,
        'C' => 3
    ];

    $array_5 = [
        'nome' => 'Rafael Ramos',
        'idade' => 18
    ];

Para apresentar um valor de um array:
    $array = [10, 20, 30];
    echo('Valores do array: ' . $array[0] . ', ' . $array[1] . ', ' . $array[2]);

Adicionar um valor ao final do array:
    $array = [10, 20, 30];
    $array[] = 40;
    array_push($array, 50);




Estrutura condicional:
    if (true) {
        // código
    }

    if (true) {
        // código
    } else {
        // código
    }

    if (true) {
        // código
    } elseif (true) {
        // código
    } else {
        // código
    }


    switch ($variavel)
    {
        case valor1:
            // código
            break;
        case valor2:
            // código
            break;
        default:
            // código
            break;
    }


    if(true):
        // código
    elseif(true):
        // código
    else:
        // código
    endif;

    switch ($variavel):
        case valor1:
            // código
            break;
        case valor2:
            // código
            break;
        default:
            // código
            break;
    endswitch;

    (true) ? return true : return false; // Operador ternário


Estrutura de repetição:
    while (true) {
        // código
    }

    do {
        // código
    } while (true);

    for ($variavel_definida_localmente = 0; true; $acrescento_em_uma_variavel++)
    {
        // código
    }

    $nomes = ['joao', 'ana, 'carlos'];
    foreach($nomes as $nome)
    {
        echo($nome . '<br />');
    }

    $capitais = [
        'portugal' => 'Lisboa',
        'brasil' => 'Brasilia',
        'espanha' => 'Madrid'
    ];
    foreach($capitais as $chave => $valor)
    {
        echo('Para o país ' . $chave . ' a sua capital é ' . $valor . "\n");
    }

Saídas de blocos:
    for(;true;)
    {
        if(true)
        {
            break; // interrompe o loop
        }
    }

    for(;true;)
    {
        if(true)
        {
            continue; // vai direto para o final do loop
        }
    }

    teste_1:
    // Código
    for(;true;)
    {
        if(true)
        {
            goto teste_2: // vai direto para a label que foi mencionada
        }
    }
    teste_2:
    // Código

Montar Funções:
    function nomeDaFuncao($parametroDaFuncao)
    {
        // código
    }

    function nomeDaFuncao($parametroDaFuncao1, $parametroDaFuncao2 = 3) // parametroDaFuncao2 é opcional de ser informado na chamada
    {
        // código
    }
    nomeDaFuncao(parametroDaFuncao2: 5, parametroDaFuncao1: 3);

    function nomeDaFuncao($parametroDaFuncao)
    {
        $parametro_0 = func_get_arg(0);
        $parametro_1 = func_get_arg(1);
        $parametro_2 = func_get_arg(2);
        $numero_de_parametros_passados = func_num_args(); // Verifica quantos parâmetros foram informados
    }
    nomeDaFuncao(10, 200, 3000);

    function nomeDaFuncao(...$variadic_parameter)
    {
        foreach($variadic_parameter as $parametros)
        {
            echo($parametros . "\n");
        }
    }
    nomeDaFuncao(10, 200, 3000);

Colocar uma variável de fora da função, dentro da função:
    $a = 10;
    function funcao()
    {
        global $a;
        $a = 20;
    }
    echo($a);

    $b = 10;
    function funcao()
    {
        $GLOBALS['b'] = 20;
    }
    echo($b);



Criar Classes:
    class ClasseHumano
    {
        public $nome;
        public $idade;
        public $altura;
        public $gosta_de_pizza;
        public $lista_de_pessoas_conhecidas;
        public $classe_familia;
        public $nulo;
        
        function caminharComAsPernas()
        {
            return;
        }
    }

    class ClasseHumano
    {
        public $nome = 'Rafael';
        public $idade = 18;
        public $altura = 1.8;
        public $gosta_de_pizza = true;
        public $lista_de_pessoas_conhecidas = ['Mãe', 'Pai', 'Irmã'];
        public $classe_familia = new ClasseFamilia;
        public $nulo = null;
        
        function aumentarIdade()
        {
            $this->idade = $this->idade + 1;
            echo('Agora ' . $this->nome . ' tem ' . $this->idade . ' anos.');
        }
    }

    class ClasseHumano
    {
        private $nome;
        private $idade;

        function __construct($nome, $idade)
        {
            $this->nome = $nome;
            $this->idade = $idade;
        }

        function mostrarIdade()
        {
            echo('A pessoa ' . $this->nome . ' tem ' . $this->idade . ' anos.');
        }
    }

    // Herança de classes

    class Animais
    {
        public $especie;
        public $peso;

        public function verEspecie()
        {
            echo('Este animal é da espécie ' . $this->especie);
        }
    }
    class Mamifero extends Animais
    {
        public $quantidade_de_pernas;
        public $tem_pelo;

        public function verPernas()
        {
            echo('Este mamífero tem ' . $this->quantidade_de_pernas . ' pernas');
        }
    }
    $teste = new Mamifero();
    $teste->especie = 'Testando';
    $teste->quantidade_de_pernas = 4;
    $teste->verEspecie();
    echo("\n");
    $teste->verPernas();





Override:
    class Animal
    {
        function mover()
        {
            echo('O animal está se movendo');
        }
    }
    class Mamifero extends Animal
    {}
    class Peixe extends Animal
    {
        function mover()
        {
            echo('O peixe está se movendo');
        }
    }
    $teste_1 = new Animal();
    $teste_2 = new Mamifero();
    $teste_3 = new Peixe();
    $teste_1->mover();
    $teste_2->mover();
    $teste_3->mover();




Override do construtor:
    class Retangulo
    {
        public $altura;
        public $largura;

        function __construct($l, $a)
        {
            $this->largura = $l;
            $this->altura = $a;
        }

        public function calcularArea()
        {
            return $this->largura * $this->altura;
        }
    }
    class Quadrado1 extends Retangulo
    {
        function __construct($l)
        {
            $this->largura = $l;
            $this->altura = $l;
        }
    }
    class Quadrado2 extends Retangulo
    {
        function __construct($l)
        {
            parent::__construct($l, $l);
        }
    }
    class Quadrado3 extends Retangulo
    {
        function __construct($l)
        {
            Retangulo::__construct($l, $l);
        }
    }

Impedir que uma classe pai passe uma propriedade ou método ao filho:
    final class Animal
    {
        final function mover()
        {
            echo('O animal está se movendo');
        }
    }
    class Mamifero extends Animal
    {}
    class Peixe extends Animal
    {
        function mover()
        {
            echo('O peixe está se movendo');
        }
    }





Classes Estáticas:
    Class Operacoes
    {
        static $valor_1;
        static $valor_2;
        static function adicionar()
        {
            return self::$valor_1 + self::$valor_2;
            // return Operacoes::$valor_1 + Operacoes::$valor_2; // Forma alternativa
        }
    }
    Operacoes::$valor_1 = 10;
    Operacoes::$valor_2 = 20;
    echo(Operacoes::adicionar());







Verificar se um valor é numérico:
    if (is_numeric('teste'))
    {
        echo('É numérico');
    } else {
        echo('Não é numérico');
    }





Variáveis constantes:
    class Matematica
    {
        const PI = 3.14;
    }
    echo(Matematica::PI);
    $c = new Matematica();
    echo($c::PI);

    const TESTE_1 = 'Olá';
    define('TESTE_2', 'testando);

Verificar se uma variável global já foi definida:
    if (defined('NOME_DA_VARIVAEL_DEFINIDA'))
    {
        echo('Esta variável já foi definida');
    } else {
        echo('Esta variável não foi definida');
    }


Verificar em qual linha do código está:
    echo( __LINE__ );

Verificar em qual caminho de arquivo está sendo executado:
    echo( __FILE__ );

Verificar qual o caminho até a pasta em que está sendo executado:
    echo( __DIR__ );

Verificar em qual function está executando:
    function teste() {
        echo( __FUNCTION__ );
    }
    teste();

Verificar em qual Classe e método está executando:
    class MinhaClasse
    {
        function indentificar(){
            echo( __CLASS__ . "\n");
            echo( __METHOD__ . "\n");
        }
    }
    $a = new MinhaClasse();
    $a->indentificar();


Acessar scripts de php de outros arquivos:
    include 'servidor.php'; // se não existir o arquivo permite o código continuar
    require 'servidor.php'; // se não existir o arquivo o código gera um fatal error


Tipos de variáveis:
    array = [1, '1', true];
    string = 'teste';
    bool
    int
    float

    function teste(array $parametro_1) {}
    function teste():array { return []; }

    // Nota: existe o declare(strict_types=1);
    // Parametro sendo opcional o valor nulo: function teste(?array $parametro_1) {}



Verificar se uma variável está definida:
    isset($nome_da_variavel);

Verificar se uma variável está vazia, nula, zerada ou falsa;
    empty($nome_da_variavel);

Como destruir (remover da memória) uma variável:
    $a = 'teste';
    unset($a);

Verificar como uma variável está extruturalmente construída:
    $a = 'Rafael';
    print_r($a);
    var_dum($a);
    $b = ['Rafael', 'Ramos', 'Teste'];
    print_r($b);
    var_dum($b);



Remover espaços em brancos (ou strings) no inicio e no fim de uma string:
    $a = '     Teste   .   ';
    $b = trim($a);

    $a = 'abcdefa';
    $b = trim($a, 'a'); // bcdef
    $b = ltrim($a, 'a'); // bcdefa // Caso queira remover somente na esquerda
    $b = rtrim($a, 'a'); // abcdef // Caso queira remover somente na direita



Para abrir um arquivo:
    $arquivo = fopen(time() . '.txt' . 'w');
    fwrite($arquivo, 'Olá Mundo!');
    fclose($arquivo);











